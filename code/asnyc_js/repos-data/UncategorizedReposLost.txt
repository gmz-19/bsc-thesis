{
     "language": "js",
     "construct": "uncategorized",
     "total_count": 2,
     "time_period": "Start date: 2013-01-01, end date: 2023-01-01",
     "incomplete_results": false,
     "status_code": "200",
     "repositories": [
          {
               "index": 18,
               "repoFullName": "developit/greenlet",
               "creationDate": "2018-01-26",
               "languages": {
                    "JavaScript": 3339
               },
               "stars": 4602,
               "issues": {
                    "incomplete_results": false,
                    "status_code": "200",
                    "total_bug_issues": 3,
                    "total_issues": 27,
                    "issues": [
                         {
                              "title": "Why do I get a return of undefined?",
                              "description": "I am flummoxed by the following, while I can log exactly the result I am looking for, it comes back as `undefined` in my return\r\n\r\n```\r\nconst combo = {}\r\ncombo.cprefixes = JSON.parse(JSON.stringify(this.prefixes))\r\ncombo.cmyn = this.myn\r\nconsole.log('combo', combo) // looks good here\r\n\r\nconst getAnswers = greenlet(async combo => {\r\n  const pkeys = Object.keys(combo.cprefixes)\r\n  const promises = []\r\n  console.log(combo) // looks good here too\r\n  for (const key of pkeys) {\r\n\tconst url = 'https://my.data.api?myn=' + cmyn + '&prefix=' + combo.cprefixes[key].prefix\r\n\tconst res = await fetch(url).then(response => response.json())\r\n\tpromises.push(res)\r\n  }\r\n  console.log('promises:', JSON.parse(JSON.stringify(promises))) // looks good here too\r\n  await Promise.all(promises).then(results => {\r\n\tconst keys = Object.keys(results)\r\n\tconsole.log('green results: ', results) // looks good here too\r\n\tfor (const key of keys) {\r\n\t  combo.cprefixes.find(x => x.prefix === results[key].data.prefix).name = results[key].data.name\r\n\t}\r\n\tconsole.log('modified prefixes:', combo.cprefixes) // looks good here too\r\n\treturn combo.cprefixes\r\n  })\r\n})\r\n\r\nawait getAnswers(combo)\r\n  .then((response) => {\r\n\tconsole.log('got a response?:', response) // undefined here, why?\r\n  })\r\n```",
                              "label": "unlabeledBug",
                              "createdAt": "2020-11-02T14:39:56Z",
                              "closedAt": "2020-11-09T13:51:49Z",
                              "lastComment": "2020-11-09T13:51:43Z",
                              "commentCount": 3
                         },
                         {
                              "title": "Synchronous functions broken in TypeScript",
                              "description": "Trying to compile\r\n\r\n```typescript\r\nimport greenlet from 'greenlet';\r\n\r\nconst f = greenlet((foo: string) => foo);\r\n```\r\n\r\nResults in the following error\r\n\r\n```\r\nArgument of type '(foo: string) => string' is not assignable to parameter of type 'AsyncFunction<{}>'\r\n```\r\n\r\nI'd be happy to supply a PR with a fix!\r\n\r\nTypeScript version: 3.3.4\r\ngreenlet version: 1.1.0",
                              "label": "unlabeledBug",
                              "createdAt": "2019-10-05T23:13:06Z",
                              "closedAt": "2019-10-15T17:36:47Z",
                              "lastComment": "",
                              "commentCount": 0
                         },
                         {
                              "title": "Firefox doesn't support comments in provided async function",
                              "description": "More just an observation than a bug; Firefox doesn't appear to handle comments inside of the passed async function. This appears to be because it puts all the code onto one line which causes the parsing to break via a SyntaxError i.e.:\r\n\r\n```\r\nSyntaxError: missing } after function body\r\ndata:$$=async%20(data,%20stringify)%20=>%20{//%20Commentif%20(stringify)%20{data%20=%20JSON.parse(da:1:416\r\nnote: { opened at line 1, column 30\r\n```\r\n\r\nin short, this will cause an error:\r\n\r\n```javascript\r\n\tconst exampleAsyncFunc = async (data) => {\r\n            // A wild comment appears\r\n \t    return data\r\n\t}\r\n```\r\n\r\nbut this does not:\r\n\r\n```javascript\r\n\tconst exampleAsyncFunc = async (data) => {\r\n \t    return data\r\n\t}\r\n```\r\n",
                              "label": "bug",
                              "createdAt": "2018-05-25T20:53:41Z",
                              "closedAt": "2019-10-01T19:53:18Z",
                              "lastComment": "2019-10-01T19:53:18Z",
                              "commentCount": 3
                         }
                    ]
               },
               "commits": null,
               "async_constructs": {
                    "callback": 1,
                    "promise": 2,
                    "async": 2
               }
          },
          {
               "index": 35,
               "repoFullName": "bvaughn/progress-estimator",
               "creationDate": "2018-11-24",
               "languages": {
                    "JavaScript": 6741,
                    "TypeScript": 1496
               },
               "stars": 2119,
               "issues": {
                    "incomplete_results": false,
                    "status_code": "200",
                    "total_bug_issues": 3,
                    "total_issues": 11,
                    "issues": [
                         {
                              "title": "Types seem pretty broken",
                              "description": "The types seem to be wrong\r\n\r\n![Screen Shot 2019-07-02 at 2 50 25 PM](https://user-images.githubusercontent.com/1192452/60549106-c0060600-9cd8-11e9-8c76-70745938f961.png)\r\n\r\nThe types export a bunch of things the library doesn't seem to export. Such as the `configure` function.\r\n\r\nHere are the fixed types:\r\n\r\n```ts\r\nimport { Chalk } from 'chalk';\r\n\r\nexport interface Spinner {\r\n  interval: number;\r\n  frames: string[];\r\n}\r\n\r\nexport interface ChalkTheme extends Chalk {\r\n  asciiCompleted: Chalk;\r\n  asciiInProgress: Chalk;\r\n  estimate: Chalk;\r\n  estimateExceeded: Chalk;\r\n  label: Chalk;\r\n  percentage: Chalk;\r\n  progressBackground: Chalk;\r\n  progressForeground: Chalk;\r\n}\r\n\r\nexport interface Configuration {\r\n  spinner?: Spinner;\r\n  storagePath?: string;\r\n  theme?: ChalkTheme;\r\n}\r\n\r\nexport type ProgressEstimator = <T>(\r\n  promise: Promise<T>,\r\n  label: string,\r\n  estimatedDuration?: number\r\n) => Promise<T>;\r\n\r\ndeclare const configure: (options: Configuration) => ProgressEstimator;\r\n\r\nexport default configure;\r\n```",
                              "label": "unlabeledBug",
                              "createdAt": "2019-07-02T21:49:48Z",
                              "closedAt": "2020-02-07T19:48:42Z",
                              "lastComment": "2019-07-02T21:59:09Z",
                              "commentCount": 1
                         },
                         {
                              "title": "How to make this work nicely with stdout from other processes?",
                              "description": "I have this unfortunate behavior where the progress bar gets carried along with the other logs. Any ideas how I can fix this?\r\n\r\n```\r\n⠹ Building Client  0%                  0.0m, estimated 3.6m\r\nℹ ｢atl｣: Using typescript@3.0.3 from typescript\r\n⠼ Building Client  20%                 0.7m, estimated 3.6m\r\n(node:42049) DeprecationWarning: Tapable.apply is deprecated. Call apply on the plugin directly instead\r\n    at Object.pitch (/Users/chet/Code/notion-next/node_modules/worker-loader/dist/index.js:87:19)\r\n    at LOADER_EXECUTION (/Users/chet/Code/notion-next/node_modules/loader-runner/lib/LoaderRunner.js:119:14)\r\n    at runSyncOrAsync (/Users/chet/Code/notion-next/node_modules/loader-runner/lib/LoaderRunner.js:120:4)\r\n    at /Users/chet/Code/notion-next/node_modules/loader-runner/lib/LoaderRunner.js:175:3\r\n    at loadLoader (/Users/chet/Code/notion-next/node_modules/loader-runner/lib/loadLoader.js:36:3)\r\n    at iteratePitchingLoaders (/Users/chet/Code/notion-next/node_modules/loader-runner/lib/LoaderRunner.js:169:2)\r\n    at runLoaders (/Users/chet/Code/notion-next/node_modules/loader-runner/lib/LoaderRunner.js:362:2)\r\n    at NormalModule.doBuild (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModule.js:282:3)\r\n    at NormalModule.build (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModule.js:429:15)\r\n    at Compilation.buildModule (/Users/chet/Code/notion-next/node_modules/webpack/lib/Compilation.js:369:10)\r\n    at factory.create (/Users/chet/Code/notion-next/node_modules/webpack/lib/Compilation.js:596:14)\r\n    at factory (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModuleFactory.js:405:6)\r\n    at hooks.afterResolve.callAsync (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModuleFactory.js:155:13)\r\n    at AsyncSeriesWaterfallHook.eval [as callAsync] (eval at create (/Users/chet/Code/notion-next/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:6:1)\r\n    at resolver (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModuleFactory.js:138:29)\r\n    at process.nextTick (/Users/chet/Code/notion-next/node_modules/webpack/lib/NormalModuleFactory.js:342:9)\r\n⠼ Building Client  67%                 2.4m, estimated 3.6m\r\n```",
                              "label": "unlabeledBug",
                              "createdAt": "2018-12-05T01:52:39Z",
                              "closedAt": "2018-12-05T01:59:07Z",
                              "lastComment": "2018-12-05T14:15:05Z",
                              "commentCount": 3
                         },
                         {
                              "title": "setInterval timer isn't cleared when the promise rejects (in the catch)",
                              "description": "https://github.com/bvaughn/progress-estimator/blob/c5bdf72/src/index.js#L70-L72\r\n\r\nhttps://github.com/bvaughn/progress-estimator/blob/c5bdf72/src/index.js#L88-L92\r\n",
                              "label": "bug",
                              "createdAt": "2018-11-26T06:07:11Z",
                              "closedAt": "2018-11-26T16:20:41Z",
                              "lastComment": "2018-11-26T16:20:41Z",
                              "commentCount": 2
                         }
                    ]
               },
               "commits": null,
               "async_constructs": {
                    "callback": 0,
                    "promise": 1,
                    "async": 1
               }
          }
     ]
}